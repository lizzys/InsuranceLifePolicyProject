using System;
using System.Data;
using System.Data.SqlClient;
using ceTe.DynamicPDF;
using ceTe.DynamicPDF.PageElements;
using System.Web;

namespace SegurosLaFloresta.Models.ColectivoVida
{
        
public class ContactList 
{

 // Top, bottom, left and right margins of report
 private static float margin = 36;
 // Height of the header
 private static float headerHeight = 74;
 // Height of the footer
 private static float footerHeight = 14;
 // Size of paper to use
 private static PageDimensions pageSize = new PageDimensions( PageSize.Letter, PageOrientation.Landscape,  54.0f );
// private static PageDimensions pageDimensions = new PageDimensions(PageSize.Letter, PageOrientation.Portrait, margin);
 // Bottom Y coordinate for the body of the report
 private static float bodyBottom = pageSize.Height - ( margin * 2 ) - footerHeight;

 // Current page that elements are being added to
 private ceTe.DynamicPDF.Page currentPage = null;

 // Current Y coordinate where elements are being added
 private float currentY = 0;
// Used to control the alternating background
 private bool alternateBG = false;
 // Used to test for grouping
 private string currentFirstI = string.Empty;
 // Template for header and footer elements

 private static Template template = null;
 // Connection string to the Northwind database
 static string dBConnString = System.Configuration.ConfigurationSettings.AppSettings["NorthWindConnectionString"];



 public Document IniciarDocumento()
 {
 if( template == null )
 SetTemplate();

 // Create a document and set it's properties
 Document document = new Document();
 document.Creator = "ContactList.aspx";
 document.Author  = "ceTe Software";
 document.Title   = "Contact List";
 document.Template = template;
 // Establises connection to the database   
 //SqlConnection connection = GetOpenDBConn();
 //SqlDataReader data = GetContactListData( connection );






 // Builds the report
 //BuildDocument( document, data );
 // Cleans up database connections
 //data.Close(); 
 //connection.Close();
 // Outputs the ContactList to the current web page
 //document.DrawToWeb( "ContactList.pdf" );

return document;

 }





 private void SetTemplate()
 {
 template = new Template();

 // Uncomment the line below to add a layout grid to the each page
 //template.Elements.Add( new LayoutGrid() );
 // Adds header elements to the template
 //template.Elements.Add( new Image( MapPath( "../Content/images/logo.jpg" ), 0, 0, 0.21f ) );



 template.Elements.Add( new Label( "Northwind Traders", 0, 0, 720, 18, Font.HelveticaBold, 18, TextAlign.Center ) );
 template.Elements.Add( new Label( "Contact List", 0, 21, 720, 12, Font.Helvetica, 12, TextAlign.Center ) );
 template.Elements.Add( new Label( DateTime.Now.ToString("dd MMM yyyy, H:mm:ss EST"), 0, 36, 720, 12, Font.Helvetica,
12, TextAlign.Center ) );
 template.Elements.Add( new Rectangle( 0, 56, 720, 16, Grayscale.Black, new WebColor( "0000A0" ), 0.0F ) );
 template.Elements.Add( new Label( "Cust ID", 2, 57, 58, 12, Font.HelveticaBold, 12, TextAlign.Left, Grayscale.White
) );
 template.Elements.Add( new Label( "Company", 62, 57, 156, 12, Font.HelveticaBold, 12, TextAlign.Left,
Grayscale.White ) );
 template.Elements.Add( new Label( "Contact", 222, 57, 156, 12, Font.HelveticaBold, 12, TextAlign.Left,
Grayscale.White ) );
 template.Elements.Add( new Label( "Title", 362, 57, 156, 12, Font.HelveticaBold, 12, TextAlign.Left, Grayscale.White
) );
 template.Elements.Add( new Label( "Phone", 522, 57, 86, 12, Font.HelveticaBold, 12, TextAlign.Left, Grayscale.White
) );
// template.Elements.Add( new Label( "Fax", 622, 57, 86, 12, Font.HelveticaBold, 12, TextAlign.Left, Grayscale.White );

 // Adds footer elements to the template
 PageNumberingLabel pageNumLabel = new PageNumberingLabel( "Page %%CP(i)%% of %%TP(i)%%", 0, bodyBottom + 5, 720, 10,
Font.Helvetica, 10, TextAlign.Center );
 template.Elements.Add( pageNumLabel );
 }

 private void BuildDocument( Document document, SqlDataReader data )
 {
// Builds the PDF document with data from the DataReader
 AddNewPage( document );
 while( data.Read() )
 {
 // Add current record to the document
 AddRecord( document, data );



 }
 }



 private void AddRecord( Document document, SqlDataReader data )
 {
 // Creates TextAreas that are expandable
 TextArea companyName = new TextArea( data.GetString(2), 62, currentY + 3, 156, 11, Font.TimesRoman, 11 );
 TextArea contactName = new TextArea( data.GetString(3), 222, currentY + 3, 136, 11, Font.TimesRoman, 11 );
 TextArea contactTitle = new TextArea( data.GetString(4), 362, currentY + 3, 156, 11, Font.TimesRoman, 11 );

 // Gets the height required for the current record
 float requiredHeight = SetExpandableRecords( document, data, companyName, contactName, contactTitle );

 // Creates non expandable Labels
 Label customerID = new Label( data.GetString(0), 2, currentY + 3, 58, 11, Font.TimesRoman, 11 );
 Label phone = new Label( data.GetString(5), 522, currentY + 3, 96, 11, Font.TimesRoman, 11 );
 Label fax = new Label( data.IsDBNull(6)?"":data.GetString(6), 622, currentY + 3, 96, 11, Font.TimesRoman, 11 );

// Adds alternating background if required
 if( alternateBG )
 {
 currentPage.Elements.Add( new Rectangle( 0, currentY, 720, requiredHeight + 6, RgbColor.Black, new WebColor(
"E0E0FF" ), 0.0F ) );
 }

 // Toggles alternating background
 alternateBG = !alternateBG;

 // Adds elements to the current page
currentPage.Elements.Add( customerID );
currentPage.Elements.Add( companyName );
currentPage.Elements.Add( contactName );
currentPage.Elements.Add( contactTitle );
currentPage.Elements.Add( phone );
currentPage.Elements.Add( fax );
// increments the current Y position on the page
currentY += requiredHeight + 6;
}

private float SetExpandableRecords( Document document, SqlDataReader data, TextArea companyName, TextArea contactName,
TextArea contactTitle )
{
// Gets the maximum height requred of the three TextAreas
float requiredHeight = GetMaxRecordHeight( companyName, contactName, contactTitle );

// Add space for the section header if required
 float sectionHeaderHeight = 0;
 if( currentFirstI != data.GetString(1) ) sectionHeaderHeight = 26;

 // Add a new page if needed
 if( bodyBottom < currentY + requiredHeight + sectionHeaderHeight + 4 )
 {
 AddNewPage( document );
if( sectionHeaderHeight == 0 )
 {
 // Update Y coordinate of TextArea when placed on the new page
 companyName.Y = currentY + 3;
 contactName.Y = currentY + 3;
 contactTitle.Y = currentY + 3;
 }
 }

 // Add section header if required
 if( sectionHeaderHeight > 0 )
 {
 AddSectionHeader( data );
 companyName.Y = currentY + 3;
 contactName.Y = currentY + 3;
 contactTitle.Y = currentY + 3;
 }
 return requiredHeight;
 }

 private float GetMaxRecordHeight( TextArea companyName, TextArea contactName, TextArea contactTitle )
 {
 // Returns the maximum required height of the three TextAreas
 float requiredHeight = 11;
 float requiredHeightB = 0;

 requiredHeight = companyName.GetRequiredHeight();
 requiredHeightB = contactName.GetRequiredHeight();
 if( requiredHeightB > requiredHeight ) requiredHeight = requiredHeightB;
 requiredHeightB = contactTitle.GetRequiredHeight();
 if( requiredHeightB > requiredHeight ) requiredHeight = requiredHeightB;
 if( requiredHeight > 11 )
 {
 companyName.Height = requiredHeight;
 contactName.Height = requiredHeight;
 contactTitle.Height = requiredHeight;
 }
 return requiredHeight;
 }

 private void AddSectionHeader( SqlDataReader data )
 {
 // Adds a section header to the current Y coordinate of the current page
 currentFirstI = data.GetString(1);
 currentPage.Elements.Add( new Label( "- " + currentFirstI + " -", 0, currentY + 6, 720, 18, Font.HelveticaBold, 18,
TextAlign.Center ) );
 currentY += 26;
 alternateBG = false;
 }

 private void AddNewPage( Document document )
 {
 // Adds a new page to the document
 currentPage = new Page( pageSize );
 currentY = headerHeight;
 alternateBG = false;
 document.Pages.Add( currentPage );
 }

 private SqlConnection GetOpenDBConn()
 {
 // Creates and opens a database connection
 SqlConnection connection = new SqlConnection( dBConnString );
 connection.Open();
 return connection;
 }

 private SqlDataReader GetContactListData( SqlConnection connection )
 {
 // Creates a DataReader for the report
 SqlCommand command = connection.CreateCommand();
 command.CommandText = "SELECT CustomerID, FirstL = Left(CompanyName,1), " +
 "CompanyName, ContactName, ContactTitle, Phone, Fax " +
 "FROM Customers ORDER BY CompanyName";
 SqlDataReader dataReader = command.ExecuteReader();
 return dataReader;
 }

 }

}
